#ifndef {{ include_guard }}
#define {{ include_guard }}

#include <rclcpp/rclcpp.hpp>

#include <{{ ros2_header }}>
#include <{{ proto_header }}>

{% for conversion in conversions %}
{{ conversion.ros2 }} convert(const {{ conversion.proto }} & message);
{{ conversion.proto }} convert(const {{ conversion.ros2 }} & message);

template <>
struct rclcpp::TypeAdapter<{{ conversion.proto }}, {{ conversion.ros2 }}>
{
  using is_specialized = std::true_type;
  using custom_type = {{ conversion.proto }};
  using ros_message_type = {{ conversion.ros2 }};

  static void convert_to_ros_message(const custom_type & source, ros_message_type & destination)
  {
    destination = convert(source);
  }

  static void convert_to_custom(const ros_message_type & source, custom_type & destination)
  {
    destination = convert(source);
  }
};

{% endfor %}

#endif // {{ include_guard }}
